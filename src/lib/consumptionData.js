// src/lib/consumptionData.js

// Coeficientes mensuales (del archivo year-2025.csv)
export const monthlyCoefficients = {
    1: 3.450531557, 2: 3.109337581, 3: 2.909169829,
    4: 2.711090163, 5: 2.612879303, 6: 2.864985161,
    7: 3.677329971, 8: 3.665045339, 9: 2.823812239,
    10: 2.630869688, 11: 2.990159495, 12: 3.607865223
};

// Coeficientes diarios por mes (de los archivos mes-XX.csv)
// La clave es el número del mes (1-12)
export const dailyCoefficients = {
    1: [0.003554, 0.003667, 0.003667, 0.003665, 0.003554, 0.003554, 0.003667, 0.003667, 0.003667, 0.003667, 0.003665, 0.003554, 0.003650, 0.003667, 0.003667, 0.003667, 0.003667, 0.003665, 0.003554, 0.003650, 0.003667, 0.003667, 0.003667, 0.003667, 0.003665, 0.003554, 0.003650, 0.003667, 0.003667, 0.003667, 0.003667],
    2: [0.003205, 0.003306, 0.003362, 0.003408, 0.003408, 0.003408, 0.003444, 0.003205, 0.003306, 0.003362, 0.003408, 0.003408, 0.003408, 0.003444, 0.003205, 0.003306, 0.003362, 0.003408, 0.003408, 0.003408, 0.003444, 0.003205, 0.003306, 0.003362, 0.003408, 0.003408, 0.003408, 0.003444],
    3: [0.002997, 0.002931, 0.002947, 0.002981, 0.002981, 0.002981, 0.003014, 0.002997, 0.002931, 0.002947, 0.002981, 0.002981, 0.002981, 0.003014, 0.002997, 0.002931, 0.002947, 0.002981, 0.002981, 0.002981, 0.003014, 0.002997, 0.002931, 0.002947, 0.002981, 0.002981, 0.002981, 0.003014, 0.002997, 0.002836, 0.002947],
    4: [0.002570, 0.002570, 0.002570, 0.002621, 0.002498, 0.002477, 0.002549, 0.002570, 0.002570, 0.002570, 0.002621, 0.002498, 0.002477, 0.002549, 0.002570, 0.002570, 0.002570, 0.002477, 0.002498, 0.002477, 0.002549, 0.002570, 0.002570, 0.002570, 0.002621, 0.002498, 0.002477, 0.002549, 0.002570, 0.002570],
    5: [0.002362, 0.002422, 0.002421, 0.002362, 0.002391, 0.002410, 0.002410, 0.002410, 0.002422, 0.002421, 0.002362, 0.002391, 0.002410, 0.002410, 0.002410, 0.002422, 0.002421, 0.002362, 0.002391, 0.002410, 0.002410, 0.002410, 0.002422, 0.002421, 0.002362, 0.002391, 0.002410, 0.002410, 0.002410, 0.002422, 0.002421],
    6: [0.002636, 0.002636, 0.002662, 0.002662, 0.002662, 0.002686, 0.002665, 0.002636, 0.002636, 0.002662, 0.002662, 0.002662, 0.002686, 0.002665, 0.002636, 0.002636, 0.002662, 0.002662, 0.002662, 0.002686, 0.002665, 0.002636, 0.002636, 0.002662, 0.002662, 0.002662, 0.002686, 0.002665, 0.002636, 0.002636],
    7: [0.003444, 0.003444, 0.003444, 0.003418, 0.003300, 0.003328, 0.003429, 0.003444, 0.003444, 0.003444, 0.003418, 0.003300, 0.003328, 0.003429, 0.003444, 0.003444, 0.003444, 0.003418, 0.003300, 0.003328, 0.003429, 0.003444, 0.003444, 0.003444, 0.003418, 0.003300, 0.003328, 0.003429, 0.003444, 0.003444, 0.003444],
    8: [0.003411, 0.003362, 0.003287, 0.003348, 0.003379, 0.003379, 0.003379, 0.003411, 0.003362, 0.003287, 0.003348, 0.003379, 0.003379, 0.003379, 0.003287, 0.003362, 0.003287, 0.003348, 0.003379, 0.003379, 0.003379, 0.003411, 0.003362, 0.003287, 0.003348, 0.003379, 0.003379, 0.003379, 0.003411, 0.003362, 0.003287],
    9: [0.002636, 0.002636, 0.002636, 0.002636, 0.002652, 0.002634, 0.002605, 0.002636, 0.002636, 0.002636, 0.002636, 0.002652, 0.002634, 0.002605, 0.002636, 0.002636, 0.002636, 0.002636, 0.002652, 0.002634, 0.002605, 0.002636, 0.002636, 0.002636, 0.002636, 0.002652, 0.002634, 0.002605, 0.002636, 0.002636],
    10: [0.002422, 0.002422, 0.002451, 0.002410, 0.002377, 0.002410, 0.002422, 0.002422, 0.002422, 0.002451, 0.002410, 0.002377, 0.002410, 0.002422, 0.002422, 0.002422, 0.002451, 0.002410, 0.002377, 0.002410, 0.002422, 0.002422, 0.002422, 0.002451, 0.002410, 0.002278, 0.002410, 0.002422, 0.002422, 0.002422, 0.002451],
    11: [0.002880, 0.002880, 0.002888, 0.002909, 0.002909, 0.002909, 0.002931, 0.002989, 0.002880, 0.002888, 0.002909, 0.002909, 0.002909, 0.002931, 0.002989, 0.002880, 0.002888, 0.002909, 0.002909, 0.002909, 0.002931, 0.002989, 0.002880, 0.002888, 0.002909, 0.002909, 0.002909, 0.002931, 0.002989, 0.002880],
    12: [0.003287, 0.003362, 0.003362, 0.003362, 0.003397, 0.003499, 0.003499, 0.003499, 0.003362, 0.003362, 0.003362, 0.003397, 0.003487, 0.003499, 0.003287, 0.003362, 0.003362, 0.003362, 0.003397, 0.003487, 0.003499, 0.003287, 0.003362, 0.003362, 0.003499, 0.003397, 0.003487, 0.003499, 0.003287, 0.003362, 0.003362]
};


// Esta función ahora usará los coeficientes importados
export function calculateConsumptionData(annualConsumptionKWh) {
  const data = {
      annualTotal: annualConsumptionKWh,
      monthlyTotals: {},
      dailyTotals: {},
  };

  // Calcular totales mensuales
  for (let month = 1; month <= 12; month++) {
      // El coeficiente mensual ya es el porcentaje, lo dividimos por 100
      data.monthlyTotals[month] = (monthlyCoefficients[month] / 100) * annualConsumptionKWh;
  }

  // Calcular totales diarios
  for (let month = 1; month <= 12; month++) {
      const monthTotal = data.monthlyTotals[month];
      if (dailyCoefficients[month]) {
          dailyCoefficients[month].forEach((coeff, dayIndex) => {
              const day = dayIndex + 1;
              const dayKey = `${month}-${day}`;
              // El coeficiente diario es una fracción del total mensual
              data.dailyTotals[dayKey] = monthTotal * coeff;
          });
      }
  }

  return data;
}